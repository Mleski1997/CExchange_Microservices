// <auto-generated />
using System;
using CExchange.Services.Wallets.Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CExchange.Services.Wallets.Infrastructure.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    partial class WalletDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CExchange.Services.Wallets.Core.Entities.CryptoCurrency", b =>
                {
                    b.Property<int>("CryptoCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CryptoCurrencyId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("CryptoCurrencyId");

                    b.HasIndex("WalletAddress");

                    b.ToTable("CryptoCurrencies");
                });

            modelBuilder.Entity("CExchange.Services.Wallets.Core.Entities.FiatCurrency", b =>
                {
                    b.Property<int>("FiatCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FiatCurrencyId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("FiatCurrencyId");

                    b.HasIndex("WalletAddress");

                    b.ToTable("FiatsCurrencies");
                });

            modelBuilder.Entity("CExchange.Services.Wallets.Core.Entities.Wallet", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Address");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("CExchange.Services.Wallets.Core.Entities.CryptoCurrency", b =>
                {
                    b.HasOne("CExchange.Services.Wallets.Core.Entities.Wallet", null)
                        .WithMany("CryptoCurrences")
                        .HasForeignKey("WalletAddress");
                });

            modelBuilder.Entity("CExchange.Services.Wallets.Core.Entities.FiatCurrency", b =>
                {
                    b.HasOne("CExchange.Services.Wallets.Core.Entities.Wallet", null)
                        .WithMany("FiatCurrences")
                        .HasForeignKey("WalletAddress");
                });

            modelBuilder.Entity("CExchange.Services.Wallets.Core.Entities.Wallet", b =>
                {
                    b.Navigation("CryptoCurrences");

                    b.Navigation("FiatCurrences");
                });
#pragma warning restore 612, 618
        }
    }
}
